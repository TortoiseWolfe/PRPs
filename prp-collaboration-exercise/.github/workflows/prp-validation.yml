name: PRP Format Validation

on:
  pull_request:
    paths:
      - 'student-PRPs/**.md'
    types: [opened, synchronize, reopened]

jobs:
  validate-prp:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml markdown pytest
      
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v40
        with:
          files: |
            student-PRPs/**.md
      
      - name: Validate PRP structure
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "Validating PRP files..."
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "Checking: $file"
            python scripts/validate_prp.py "$file"
          done
      
      - name: Check required sections
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            python scripts/check_sections.py "$file"
          done
      
      - name: Validate markdown formatting
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            python scripts/check_markdown.py "$file"
          done
      
      - name: Check file naming convention
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            if [[ ! "$file" =~ ^student-PRPs/[a-z0-9_-]+-[a-z0-9_-]+\.md$ ]]; then
              echo "ERROR: File '$file' does not follow naming convention"
              echo "Expected format: student-PRPs/[username]-[exercise-name].md"
              exit 1
            fi
          done
      
      - name: Generate validation report
        if: always()
        run: |
          echo "## PRP Validation Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.changed-files.outputs.any_changed }}" == "true" ]; then
            echo "### Files Validated" >> $GITHUB_STEP_SUMMARY
            for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
              echo "- ✅ $file" >> $GITHUB_STEP_SUMMARY
            done
          else
            echo "No PRP files changed in this PR" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Comment PR with validation results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');
            
            // Get changed files
            const changedFiles = `${{ steps.changed-files.outputs.all_changed_files }}`.split(' ').filter(f => f);
            
            if (changedFiles.length === 0) {
              return;
            }
            
            let comment = '## 🤖 PRP Validation Results\n\n';
            let allValid = true;
            
            for (const file of changedFiles) {
              try {
                execSync(`python scripts/validate_prp.py ${file}`, { stdio: 'pipe' });
                comment += `✅ **${file}**: All checks passed\n`;
              } catch (error) {
                allValid = false;
                comment += `❌ **${file}**: Validation failed\n`;
                comment += '```\n' + error.stdout.toString() + '\n```\n';
              }
            }
            
            if (allValid) {
              comment += '\n### 🎉 All PRP validations passed!\n';
              comment += '\nYour PRP follows the correct format. Please wait for instructor review.';
            } else {
              comment += '\n### ⚠️ Some validations failed\n';
              comment += '\nPlease fix the issues above and push your changes.';
            }
            
            // Find and update or create comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('PRP Validation Results')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }